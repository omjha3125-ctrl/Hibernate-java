package org.example;

// Import statements for necessary classes.
// Util is our custom class for managing the Hibernate SessionFactory.
import entities.Certificates; // Import the Certificates entity we defined.
import entities.Student; // Import the Student entity we defined.
import org.example.Util.Util;
import org.hibernate.Session; // Import the Hibernate Session class, used for database operations.
import org.hibernate.SessionFactory; // Import the SessionFactory interface.
import org.hibernate.Transaction; // Import Transaction for managing database transactions.

import java.util.ArrayList;
import java.util.List;

/**
 * The Main class contains the entry point for the application.
 * This is where the Java Virtual Machine (JVM) starts executing the program.
 * 
 * This example demonstrates:
 * 1. Basic Hibernate operations with a single entity
 * 2. Working with entity relationships (Student and Certificates)
 * 3. Handling multiple entities in a single transaction
 * 4. Using the StudentService for common operations
 * 
 * Key Concepts Demonstrated:
 * - SessionFactory Management: Using a singleton pattern for efficient resource management
 * - Session Handling: Opening and closing sessions for database operations
 * - Transaction Management: Using transactions to ensure data consistency
 * - Entity Relationships: Working with one-to-many relationships between entities
 * - CRUD Operations: Creating, reading, updating, and deleting entities
 * - Exception Handling: Properly handling exceptions during database operations
 * - Resource Management: Ensuring proper cleanup of resources
 */
public class Main {
    /**
     * The main method. This is the first method called when the program runs.
     *
     * @param args Command-line arguments passed to the program (not used here).
     * 
     * Purpose:
     * - Entry point for the application
     * - Demonstrates complete workflow of Hibernate operations
     * - Shows both direct session usage and service layer usage
     */
    public static void main(String[] args) {

        // --- 1. Get the SessionFactory ---
        // We use our custom Util class to get a configured SessionFactory instance.
        // The SessionFactory is an expensive-to-create, threadsafe object intended
        // to be created once and reused.
        SessionFactory sessionFactory = Util.getSessionFactory();
        
        // Create an instance of StudentService
        StudentService studentService = new StudentService();

        // --- 2. Open a Session ---
        // A Session is a single-threaded, short-lived object that represents
        // a conversation between the Java application and the database.
        // It's used to perform CRUD (Create, Read, Update, Delete) operations.
        Session session = sessionFactory.openSession();

        // --- 3. Begin a Transaction ---
        // Database operations in Hibernate should typically be wrapped in a transaction.
        // This ensures data consistency and allows for rollback if something goes wrong.
        Transaction transaction = session.beginTransaction();

        try {
            // --- 4. Perform Database Operations ---

            // Create a new Student object in Java memory.
            Student newStudent = new Student();
            newStudent.setName("Alice Johnson");
            newStudent.setCollege("XYZ University");
            newStudent.setPhone("123-456-7890");
            // isActive is true by default as defined in the Student class.

            // Create some certificates for the student
            Certificates cert1 = new Certificates();
            cert1.setId("CERT001");
            cert1.setLink("http://example.com/cert1");
            cert1.setStudent(newStudent); // Establish the relationship

            Certificates cert2 = new Certificates();
            cert2.setId("CERT002");
            cert2.setLink("http://example.com/cert2");
            cert2.setStudent(newStudent); // Establish the relationship

            // Add certificates to the student's list
            List<Certificates> certificates = new ArrayList<>();
            certificates.add(cert1);
            certificates.add(cert2);
            newStudent.setCertificates(certificates);

            // Save the Student object to the database using direct session approach.
            // Hibernate will generate the appropriate SQL INSERT statement.
            session.persist(newStudent); // persist() is the standard JPA method. save() is also common in Hibernate.
            System.out.println("Saved Student ID: " + newStudent.getStudentId()); // ID should be generated by the database.

            // Demonstrating how to work with multiple entries in one transaction
            // Create another student with certificates
            Student anotherStudent = new Student();
            anotherStudent.setName("Bob Smith");
            anotherStudent.setCollege("ABC College");
            anotherStudent.setPhone("098-765-4321");

            Certificates cert3 = new Certificates();
            cert3.setId("CERT003");
            cert3.setLink("http://example.com/cert3");
            cert3.setStudent(anotherStudent);

            List<Certificates> moreCertificates = new ArrayList<>();
            moreCertificates.add(cert3);
            anotherStudent.setCertificates(moreCertificates);

            session.persist(anotherStudent);
            System.out.println("Saved Another Student ID: " + anotherStudent.getStudentId());

            // --- 5. Commit the Transaction ---
            // If all operations within the try block succeed, commit the transaction.
            // This makes the changes permanent in the database.
            transaction.commit();
            System.out.println("Transaction committed successfully.");

        } catch (Exception e) {
            // --- Error Handling ---
            // If any exception occurs during the database operations...
            if (transaction != null) {
                // ...rollback the transaction to undo any changes made so far.
                transaction.rollback();
                System.err.println("Transaction rolled back due to an error.");
            }
            // Print the stack trace for debugging.
            e.printStackTrace();
        } finally {
            // --- 6. Clean up Resources ---
            // It's crucial to close the session to release database connections
            // and other resources back to the pool.
            session.close();
        }
        
        // Demonstrate using StudentService methods
        System.out.println("\n--- Demonstrating StudentService methods ---");
        
        // Get a student by ID using the service
        Student fetchedStudent = studentService.getStudentById(1L);
        if (fetchedStudent != null) {
            System.out.println("Fetched Student: " + fetchedStudent.getName());
            System.out.println("College: " + fetchedStudent.getCollege());
            System.out.println("Phone: " + fetchedStudent.getPhone());
        } else {
            System.out.println("Student with ID 1 not found.");
        }
        
        // Update a student using the service
        if (fetchedStudent != null) {
            fetchedStudent.setPhone("999-888-7777");
            studentService.updateStudent(fetchedStudent);
            System.out.println("Updated student phone number.");
        }
        
        // Delete a student using the service
        studentService.deleteStudent(2L); // Delete the second student we created
        System.out.println("Attempted to delete student with ID 2.");
        
        // Try to fetch the deleted student
        Student deletedStudent = studentService.getStudentById(2L);
        if (deletedStudent == null) {
            System.out.println("Student with ID 2 was successfully deleted.");
        } else {
            System.out.println("Student with ID 2 still exists.");
        }

        // Indicate that the main logic has completed.
        System.out.println("Hibernate example (saving Students and Certificates) completed.");
    }
}
